// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name flex_api_ios_sdk
import CommonCrypto
import CryptoKit
import CybersourceFlexSDKPrivate
import Foundation
import Security
import Swift
public class FlexErrorResponse : Swift.Equatable, Swift.Decodable, Swift.Error {
  public static func == (lhs: flex_api_ios_sdk.FlexErrorResponse, rhs: flex_api_ios_sdk.FlexErrorResponse) -> Swift.Bool
  final public let responseStatus: flex_api_ios_sdk.ResponseStatus
  public init(status: flex_api_ios_sdk.ResponseStatus)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ResponseStatus : Swift.Equatable, Swift.Decodable {
  public static func == (lhs: flex_api_ios_sdk.ResponseStatus, rhs: flex_api_ios_sdk.ResponseStatus) -> Swift.Bool
  final public let status: Swift.Int
  final public let reason: Swift.String
  final public let message: Swift.String
  final public let domain: Swift.String?
  final public let correlationId: Swift.String?
  public var details: [flex_api_ios_sdk.ResponseStatusDetail]?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ResponseStatusDetail : Swift.Equatable, Swift.Decodable {
  public static func == (lhs: flex_api_ios_sdk.ResponseStatusDetail, rhs: flex_api_ios_sdk.ResponseStatusDetail) -> Swift.Bool
  final public let location: Swift.String
  final public let message: Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class FlexService {
  public typealias Result = Swift.Result<flex_api_ios_sdk.TransientToken, flex_api_ios_sdk.FlexErrorResponse>
  public enum Error : Swift.Error {
    case invalidCaptureContext
    case invalidData
    case connectivity
    public static func == (a: flex_api_ios_sdk.FlexService.Error, b: flex_api_ios_sdk.FlexService.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init()
  public func flexPublicKey(kid: Swift.String) -> Security.SecKey?
  public func createTransientToken(from captureContext: Swift.String, data: [Swift.String : Any], completion: @escaping (flex_api_ios_sdk.FlexService.Result) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TransientToken : Swift.Equatable {
  public static func == (lhs: flex_api_ios_sdk.TransientToken, rhs: flex_api_ios_sdk.TransientToken) -> Swift.Bool
  final public let token: Swift.String
  @objc deinit
}
